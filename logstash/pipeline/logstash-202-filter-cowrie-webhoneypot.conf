# Guy Bruneau, guybruneau@outlook.com
#
# Initial Release 
# Date: 30 Dec 2023
# Version: 1.0
# This is a new parser for the DShield Honeypot 
# logs parsing the new and impouved webhoneypot logs
# located in /srv/db
# The logs are parsed by a BASH script before ingestion
# via Elastic filebeat. Script is webhoneypot.sh
# Date: 22 June 2024
# Version: 1.5
# Added base64 conversion or url.original to url.query to be used with DShield URL query
# Date: 12 July 2024
# Version: 1.6
# Fixed source and destination address and added Geo for destionation address
# 
# This logstash parser is for the DShield Honeypot
# https://isc.sans.edu/tools/honeypot
#
# This parser uses ECS version 8.x
# https://www.elastic.co/guide/en/ecs/current/ecs-tls.html

filter {
  if [log][file][path] =~ "webhoneypot" {
    json {
      source => message
    }
    # https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
    # Converting timestamp to accepted format
    # 2023-01-18T23:10:59.968253
    date {
      match => [ "time", "yyyy-MM-dd'T'HH:mm:ss'.'SSSSSS", "ISO8601" ]
      target => "@timestamp"
      timezone => "UTC"
    }
  }
}

# https://www.elastic.co/guide/en/ecs/current/ecs-event.html

filter {
  if [log][file][path] =~ "webhoneypot" {
    mutate {
      add_field => { "event.dataset" => "webhoneypot" }
      add_field => { "event.category" => "intrusion_detection" }
      add_field => { "event.kind" => "alert" }
      add_field => { "event.type" => "indicator" }
      add_field => { "event.outcome" => "unknown" }
      add_field => { "interface.alias" => "outside" }
      add_field => { "network.direction" => "inbound" }
      add_field => { "network.type" => "ipv4" }
      add_field => { "file.directory" => "/srv/db/" }
    }
  }
}

# https://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html

filter {
  if [log][file][path] =~ "webhoneypot" {
    mutate {
      # Make the following changes: rename and copy fields
      rename => { "sip" => "source.address" }
      rename => { "dip" => "destination.address" }
      rename => { "destfile" => "file.path" }
      rename => { "duration" => "event.duration" }
      rename => { "method" => "http.request.method" }
      rename => { "username" => "user.name" }
      rename => { "password" => "user.password" }
      rename => { "eventid" => "event.id" }
      rename => { "session" => "event.code" }
      rename => { "protocol" => "network.protocol" }
      rename => { "message" => "event.original" }
      rename => { "url" => "url.query" }
      rename => { "version" => "http.version" }
      rename => { "[headers][accept]" => "http.request.accept" }
      rename => { "[headers][accept-encoding]" => "http.request.accept-encoding" }
      rename => { "[headers][connection]" => "http.request.connection" }
      copy => { "url.query" => "url.original" }
      copy => { "url.original" => "http.request.body.content" }
    }
  }
}


# https://www.elastic.co/guide/en/logstash/current/plugins-filters-dns.html
# 900 ms = 15 mins

filter {
  if [log][file][path] =~ "webhoneypot" {
    mutate {
      copy => { "source.address" => "source.domain" }
    }
    dns {
      reverse => [ "source.domain" ]
      nameserver => [ "192.168.25.2", "192.168.25.3" ]
      action => "replace"
      hit_cache_size => 4096
      hit_cache_ttl => 900
      failed_cache_size => 1024
      failed_cache_ttl => 900
    }
    mutate {
      copy => { "source.address" => "related.ip" }
      copy => { "source.domain" => "related.hosts" }
      copy => { "related.hash" => "file.name" }
    }
  }
}

# Add GeoIP information to destination hostname

filter {
  if [log][file][path] =~ "webhoneypot" {
    geoip {
      source => "source.address"
      target => "source"
      #database => "/etc/logstash/ingest-geoip/GeoLite2-City.mmdb"
      database => "/usr/share/logstash/vendor/bundle/jruby/3.1.0/gems/logstash-filter-geoip-7.2.13-java/vendor/GeoLite2-City.mmdb"     
    }
    geoip {
      source => "source.address"
      target => "source"
      #database => "/etc/logstash/ingest-geoip/GeoLite2-ASN.mmdb"
      database => "/usr/share/logstash/vendor/bundle/jruby/3.1.0/gems/logstash-filter-geoip-7.2.13-java/vendor/GeoLite2-ASN.mmdb"
    }
    geoip {
      source => "destination.address"
      target => "destination"
      #database => "/etc/logstash/ingest-geoip/GeoLite2-City.mmdb"
      database => "/usr/share/logstash/vendor/bundle/jruby/3.1.0/gems/logstash-filter-geoip-7.2.13-java/vendor/GeoLite2-City.mmdb"
    }
    geoip {
      source => "destination.address"
      target => "source"
      #database => "/etc/logstash/ingest-geoip/GeoLite2-ASN.mmdb"
      database => "/usr/share/logstash/vendor/bundle/jruby/3.1.0/gems/logstash-filter-geoip-7.2.13-java/vendor/GeoLite2-ASN.mmdb"
    }
  }
}

# Adding local private network location

filter {
  if [log][file][path] =~ "webhoneypot" {
    if [destination.address] =~ /^192\.168\./ or [destination.address] =~ /^10\./ {
      mutate {
        add_field => { "[destination][geo][country_name]"  => "Canada" }
        add_field => { "[destination][geo][country_iso_code]" => "CA" }
        add_field => { "[destination][geo][city_name]" => "Ottawa" }
        add_field => { "[destination][geo][location][lat]" => "45.4247" }
        add_field => { "[destination][geo][location][lon]" => "-75.6950" }
      }
      mutate {
        convert => { "[destination][geo][location][lat]" =>  "float" }
        convert => { "[destination][geo][location][lon]" =>  "float" }
      }
    }
  }
}

# This section is to remove any non-needed fields

filter {
  if [log][file][path] =~ "webhoneypot" {
    mutate {
      # Remove these fields
      remove_field => [ "time" ]
      remove_field => [ "useragent" ]
      remove_field => [ "[response_id][headers][Access-Control-Allow-Origin]" ]
      remove_field => [ "[signature_id][max_score]" ]
      # Removing the destionation IP who has been put as source.ip
      remove_field => [ "[source][ip]" ]
      # Remove any signature_id.rule.x
      remove_field => [ "[signature_id][rules]" ]
    }
  }
}


# Remove IP address from host and keep destination port
filter {
  if [log][file][path] =~ "webhoneypot" {
    grok {
      match => { "[headers][host]" => ".*:%{INT:destination.port}" }
    }
  }
}

filter {
  if [log][file][path] =~ "webhoneypot" {
    mutate {
      # Rename these fields
      rename => { "[headers][user-agent]" => "user_agent.original" }
      rename => { "[headers][accept-language]" => "http.request.accept-language" }
      rename => { "[headers][content-type]" => "http.request.content-type" }
      rename => { "[headers][accept-language]" => "http.request.accept-language" }
      rename => { "[headers][x-requested-with]" => "http.request.x-requested-with" }
      rename => { "[response_id][headers][content-type]" => "http.request.mime_type" }
      rename => { "[response_id][headers][Server]" => "data_stream.dataset" }
      rename => { "[response_id][status_code]" => "http.response.status_code" }
      copy => { "destination.port" => "url.port" }
      # Adding source IP
      copy => { "source.address" => "source.ip" }
      # Remove these fields
      remove_field => [ "[headers][host]" ]
      #remove_field => [ "event.original" ]
      gsub => [
        # Remove whitespaces from user_agent.original and leave one space
        "user_agent.original", "\s+", " "
      ]
      gsub => [
        # Remove HTTP from http.version
        "http.version", "HTTP/", " "
      ]
    }
  }
}

# Encoding url.original into url.base64 to be used to query DShield Web Application Logs - URL History
#
filter {
  if [log][file][path] =~ "webhoneypot" {

    ruby {
       code => 'event.set("url.query", Base64.encode64(event.get("url.original")))'
    }
  }
}


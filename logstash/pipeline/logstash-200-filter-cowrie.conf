# Guy Bruneau, guybruneau@outlook.com
#
# Initial Release 
# Date: 20 Jan 2023
# Version: 0.5
# Date: 8 Feb 2023
# Version: 0.6
# Minor update to the parser
# Date: 30 Dec 2023
# Version: 1.0
# Major update, added new fields and some fields were remapped.
# Date: 12 July 2024
# Version: 1.1
# Fixed source and destination address and added Geo for destionation address
# Date: 9 Aug 2024
# Version: 1.2
# Added event.ingested to logstash to be used with the SIEM for alerting.
# Date: 29 Jan 2025
# Version: 1.3
# Added message: Command found & Command not found
#
# This logstash parser is for the DShield Honeypot
# https://isc.sans.edu/tools/honeypot
#
# This parser uses ECS version 8.x
# https://www.elastic.co/guide/en/ecs/current/ecs-tls.html

filter {
  if [log][file][path] =~ "cowrie" {
    json {
      source => message
    }
    # https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
    # Converting timestamp to accepted format
    # 2023-01-18T23:10:59.968253Z
    date {
      match => [ "timestamp", "yyyy-MM-dd'T'HH:mm:ss'.'SSSSSSZ", "ISO8601" ]
      target => "@timestamp"
      timezone => "UTC"
    }
  }
}

# Add when the data was ingested to Elastic

filter {
  if [log][file][path] =~ "cowrie" {
    ruby {
      code => "event.set('event.ingested' , Time.now.utc)"
    }
  }
}

# https://www.elastic.co/guide/en/ecs/current/ecs-event.html

filter {
  if [log][file][path] =~ "cowrie" {
    grok {
      # Map user commands - CMD:
      match => { "[message]" => "CMD:\s+%{GREEDYDATA:source.user.command}" }
      # Map user commands - Command found:
      match => { "[message]" => "Command found:\s+%{GREEDYDATA:source.user.command}" }
      # Map user commands - Command not found:
      match => { "[message]" => "Command not found:\s+%{GREEDYDATA:source.user.command}" }
    }
    mutate {
      add_field => { "event.dataset" => "honeypot" }
      add_field => { "event.category" => "intrusion_detection" }
      add_field => { "event.kind" => "alert" }
      add_field => { "event.type" => "indicator" }
      add_field => { "interface.alias" => "outside" }
      add_field => { "network.direction" => "inbound" }
      add_field => { "network.type" => "ipv4" }
      add_field => { "file.directory" => "/var/lib/cowrie/downloads/" }
    }
  }
}

# https://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html

filter {
  if [log][file][path] =~ "cowrie" {
    mutate {
      # Make the following changes: rename and copy fields
      rename => { "src_ip" => "source.address" }
      rename => { "dst_ip" => "destination.address" }
      rename => { "src_port" => "source.port" }
      rename => { "dst_port" => "destination.port" }
      rename => { "destfile" => "file.path" }
      rename => { "shasum" => "file.hash.sha256" }
      rename => { "encCS" => "hash.cypher" }
      rename => { "macCS" => "hash.hmac" }
      rename => { "hassh" => "ssh.client" }
      rename => { "duration" => "event.duration" }
      rename => { "hasshAlgorithms" => "hash.algorithm" }
      copy => { "file.hash.sha256" => "related.hash" }
      rename => { "username" => "user.name" }
      rename => { "password" => "user.password" }
      rename => { "session" => "event.code" }
      rename => { "protocol" => "network.protocol" }
      rename => { "url" => "url.original" }
      rename => { "version" => "process.name" }
      rename => { "data" => "http.request.body.content" }
      rename => { "message" => "event.original" }
      rename => { "filename" => "file.name" }
    }
  }
}

# Parsing login action succeeded or failed
# login attempt [acs/Passw0rd] failed
# login attempt [prueba/1q2w3e4r] succeeded

filter {
  if [log][file][path] =~ "cowrie" {
    grok {
      # Map if the action was a success or failed
      match => { "[event][original]" => "login.*]\s+(?<event.action>succeeded|failed)" }
    }
    grok {
      # Map TTY Activity
      match => { "ttylog" => "var\/lib\/cowrie/tty\/%{GREEDYDATA:transaction.id}" }
    }
    grok {
      # Map event types
      match => { "[eventid]" => "cowrie.%{GREEDYDATA:event.outcome}" }
    }
  }
}

# https://www.elastic.co/guide/en/logstash/current/plugins-filters-dns.html
# 900 ms = 15 mins

filter {
  if [log][file][path] =~ "cowrie" {
    mutate {
      copy => { "source.address" => "source.domain" }
    }
    dns {
      reverse => [ "source.domain" ]
      nameserver => [ "192.168.25.2", "192.168.25.3" ]
      action => "replace"
      hit_cache_size => 4096
      hit_cache_ttl => 900
      failed_cache_size => 1024
      failed_cache_ttl => 900
    }
    mutate {
      copy => { "source.address" => "related.ip" }
      copy => { "source.domain" => "related.hosts" }
    }
  }
}

# Add GeoIP information to destination hostname

filter {
  if [log][file][path] =~ "cowrie" {
    geoip {
      source => "source.address"
      target => "source"
      #database => "/etc/logstash/ingest-geoip/GeoLite2-City.mmdb"
      database => "/usr/share/logstash/vendor/bundle/jruby/3.1.0/gems/logstash-filter-geoip-7.3.0-java/vendor/GeoLite2-City.mmdb"
    }
    geoip {
      source => "source.address"
      target => "source.geo"
      #database => "/etc/logstash/ingest-geoip/GeoLite2-ASN.mmdb"
      database => "/usr/share/logstash/vendor/bundle/jruby/3.1.0/gems/logstash-filter-geoip-7.3.0-java/vendor/GeoLite2-ASN.mmdb"
    }
    geoip {
      source => "destination.address"
      target => "destination"
      #database => "/etc/logstash/ingest-geoip/GeoLite2-City.mmdb"
      database => "/usr/share/logstash/vendor/bundle/jruby/3.1.0/gems/logstash-filter-geoip-7.3.0-java/vendor/GeoLite2-City.mmdb"
    }
    geoip {
      source => "destination.address"
      target => "destination.geo"
      #database => "/etc/logstash/ingest-geoip/GeoLite2-ASN.mmdb"
      database => "/usr/share/logstash/vendor/bundle/jruby/3.1.0/gems/logstash-filter-geoip-7.3.0-java/vendor/GeoLite2-ASN.mmdb"
    }
  }
}

# Adding local private network location

filter {
  if [log][file][path] =~ "cowrie" {
    if [destination.address] =~ /^192\.168\./ or [destination.address] =~ /^10\./ {
      mutate { 
        add_field => { "[destination][geo][country_name]"  => "Canada" }
        add_field => { "[destination][geo][country_iso_code]" => "CA" }
        add_field => { "[destination][geo][city_name]" => "Ottawa" }
        add_field => { "[destination][geo][location][lat]" => "45.4247" }
        add_field => { "[destination][geo][location][lon]" => "-75.6950" }
      }
      mutate {
        convert => { "[destination][geo][location][lat]" =>  "float" }
        convert => { "[destination][geo][location][lon]" =>  "float" }
      } 
    } 
  }
}

# This section is to remove any non-needed fields

filter {
  if [log][file][path] =~ "cowrie" {
    mutate {
      copy => { "destination.address" => "destination.ip" }
      # Remove these fields
      remove_field => [ "sensor" ]
      remove_field => [ "compCS" ]
      remove_field => [ "keyAlgs" ]
      remove_field => [ "kexAlgs" ]
      remove_field => [ "langCS" ]
      remove_field => [ "timestamp" ]
      remove_field => [ "eventid" ]
    }
  }
}


# version: "3.8"

# Guy Bruneau
# Date: 21 Jan 2024
# Version: 1.0
# Initial release of DShield Sensor ELK docker log storage.
# Date: 3 June 2024
# Added SSL to Kibana
# Date: 11 June 2024
# Added auto-restart. This will restart the services after system is rebooted
# and systemctl enable docker.service has been enabled
# Date: 31 December 2024
# Added filebeat to docker. Filebeat was added to load the filebeat Kibana templates
# to be used with logs coming from the cloud.
# Filebeat modules.d for netflow, zeek, etc.
# Date: 25 Jan 2025
# Added metricbeat to docker. Metricbeat was added to load the metricbeat Kibana templates
# to be used to monitor ELK Stack and Beats.

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  logstashdata01:
    driver: local
  fleetserverdata:
    driver: local
  filebeat:
    driver: local
  metricbeatdata:
    driver: local

networks:
  default:
    name: elastic
    external: false

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    restart: unless-stopped
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "      - ${HOSTNAME}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${IPADDRESS}\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "      - ${HOSTNAME}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${IPADDRESS}\n"\
          "  - name: fleet-server\n"\
          "    dns:\n"\
          "      - fleet-server\n"\
          "      - localhost\n"\
          "      - ${HOSTNAME}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${IPADDRESS}\n"\
          "  - name: filebeat\n"\
          "    dns:\n"\
          "      - filebeat\n"\
          "      - localhost\n"\
          "      - ${HOSTNAME}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${IPADDRESS}\n"\
          "  - name: metricbeat\n"\
          "    dns:\n"\
          "      - metricbeat\n"\
          "      - localhost\n"\
          "      - ${HOSTNAME}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${IPADDRESS}\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    hostname: es01
    container_name: es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
      - ${SCRIPTS_DIR}:/usr/share/elasticsearch/scripts
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120 

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    hostname: kibana
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      - ${SCRIPTS_DIR}:/usr/share/kibana/scripts
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=certificate
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_KEY=config/certs/kibana/kibana.key
      - SERVER_SSL_CERTIFICATE=config/certs/kibana/kibana.crt
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -k --insecure -I https://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  cowrie:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    hostname: cowrie
    container_name: cowrie
    image: photon
    volumes:
      - ${SCRIPTS_DIR}:/usr/share/scripts
      - certs:/usr/share/config/certs
    user: root
    #restart: unless-stopped
    entrypoint: /usr/share/scripts/cowrie-setup.sh
    environment: 
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=https://kibana:5601

  logstash01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    hostname: logstash
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    restart: unless-stopped
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - "./logstash/pipeline/:/usr/share/logstash/pipeline/"
      - "./logstash/config/:/usr/share/logstash/config/"
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - ${LOGSTASH_PORT}:5044
      - ${LOGSTASH_API_PORT}:9600
    environment:
      - allow_superuser=true
      - config.reload.automatic=true
      - config.reload.interval=3s
      - pipeline.ecs_compatibility=v8
      - xpack.geoip.download.endpoint=https://geoip.elastic.co/v1/database
      - xpack.geoip.downloader.enabled=true
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - NAME_SERVER=${DNS_SERVER}
    mem_limit: ${LS_MEM_LIMIT}

  fleet-server:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    hostname: fleet-server
    container_name: fleet-server
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    labels:
      co.elastic.logs/module: fleet-server
    user: root
    restart: unless-stopped
    configs:
      - source: ea_config
        target: /usr/share/elastic-agent/state/elastic-agent.yml
    volumes:
      - certs:/certs
      - fleetserverdata:/usr/share/elastic-agent
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    ports:
      - ${FLEET_PORT}:8220
    environment:
      - SSL_CERTIFICATE_AUTHORITIES=/certs/ca/ca.crt
      - CERTIFICATE_AUTHORITIES=/certs/ca/ca.crt
      - FLEET_CA=/certs/ca/ca.crt
      - FLEET_ENROLL=1
      - FLEET_INSECURE=false
      - FLEET_SERVER_ES_CERT=/certs/es01/es01.crt
      - FLEET_SERVER_ES_CERT_KEY=/certs/es01/es01.key
      - FLEET_SERVER_INSECURE_HTTP=false
      - FLEET_SERVER_ELASTICSEARCH_CA=/certs/ca/ca.crt
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://es01:9200
      - FLEET_SERVER_ELASTICSEARCH_INSECURE=true
      - FLEET_SERVER_ENABLE=1
      - FLEET_SERVER_CERT=/certs/fleet-server/fleet-server.crt
      - FLEET_SERVER_CERT_KEY=/certs/fleet-server/fleet-server.key
      - FLEET_SERVER_INSECURE_HTTP=true
      - FLEET_SERVER_POLICY_ID=fleet-server-policy
      - FLEET_URL=https://fleet-server:8220
      - KIBANA_FLEET_CA=/certs/ca/ca.crt
      - KIBANA_FLEET_SETUP=1
      - KIBANA_FLEET_USERNAME=elastic
      - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_FLEET_HOST=https://kibana:5601
      - KIBANA_HOST=https://kibana:5601
      - KIBANA_USERNAME=elastic
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}

  filebeat:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    hostname: filebeat
    container_name: filebeat
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    restart: unless-stopped
    ports:
      - ${FILEBEAT_PORT}:5067
    command: ["filebeat", "-e", "--strict.perms=false"]
    configs:
      - source: fb_config
        target: /usr/share/filebeat/filebeat.yml
    volumes:
      - certs:/usr/share/filebeat/certs
      - "filebeat:/usr/share/filebeat/data"
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log/auth.log:/var/log/auth.log:ro
    environment:
      - xpack.http.enabled=true
      - xpack.monitoring.enabled=false
      - ELASTIC_HOSTS=https://es01:9200
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=certs/ca/ca.crt
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=certificate
      - NAME_SERVER=${DNS_SERVER}

  metricbeat:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    hostname: metricbeat
    container_name: metricbeat
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    labels:
      co.elastic.logs/module: metricbeat
    user: root
    restart: unless-stopped
    command: ["--environment", "container"]
    ports:
      - ${METRICBEAT_PORT}:5066
    configs:
      - source: mb_config
        target: /usr/share/metricbeat/metricbeat.yml
    environment:
      - ELASTIC_HOSTS=https://es01:9200
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=certs/ca/ca.crt
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=certificate
      - KIBANA_HOSTS=https://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_KEY=certs/kibana/kibana.key
      - SERVER_SSL_CERTIFICATE=certs/kibana/kibana.crt
    volumes:
      - certs:/usr/share/metricbeat/certs
      - metricbeatdata:/usr/share/metricbeat/data
      - "./metricbeat/modules.d/:/usr/share/metricbeat/modules.d/"
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"


# This load the filebeat.yml template into filebeat docker
# The following steps must me done to correcly setup filebeat.yml
# sudo chown root:root filebeat/filebeat.yml
# sudo chmod 644 filebeat/filebeat.yml

configs:
  fb_config:
    file: ./filebeat/filebeat.yml
  ea_config:
    file: ./elastic-agent/state/elastic-agent.yml
  mb_config:
    file: ./metricbeat/metricbeat.yml

